{"name":"Fastlegs","body":"[![Build Status](https://secure.travis-ci.org/didit-tech/FastLegS.png)](http://travis-ci.org/didit-tech/FastLegS)\r\n#FastLegS\r\n\r\nPostgreSQL ORM on top of node-postgres.\r\n\r\n##Installation\r\n\r\n    npm install FastLegS\r\n\r\n##Quickstart\r\n\r\n**NOTE:** As of version```0.2.0```, both PostgreSQL and MySQL are supported. You indicate which database you are using at object instantiation time. All other operations and interfaces behave the same as older versions.\r\n\r\n### Setup for versions < ```0.2.0```\r\n\r\n    var FastLegS = require('FastLegS');\r\n    ...\r\n    FastLegS.connect(connectionParams);\r\n    ...\r\n\r\n### Setup for versions >= ```0.2.0```\r\n\r\n### MySQL:\r\n\r\n    var FastLegSBase = require('FastLegS');\r\n    var FastLegS = new FastLegSBase('mysql');\r\n    ...\r\n    FastLegS.connect(connectionParams);\r\n    ...\r\n\r\n### PostgreSQL:\r\n\r\n    var FastLegSBase = require('FastLegS');\r\n    var FastLegS = new FastLegSBase('pg');\r\n    ...\r\n    FastLegS.connect(connectionParams);\r\n    ...\r\n\r\n### Example:\r\n\r\n    var FastLegSBase = require('FastLegS');\r\n\r\n    // gonna use PostgreSQL\r\n    var FastLegS = new FastLegSBase('pg');\r\n\r\n    var connectionParams = {\r\n      user: 'shes'\r\n    , password: 'got'\r\n    , database: 'legs'\r\n    , host: 'localhost'\r\n    , port: 5432\r\n    }\r\n\r\n    FastLegS.connect(connectionParams);\r\n\r\n    var Post = FastLegS.Base.extend({\r\n      tableName: 'posts',\r\n      primaryKey: 'id'\r\n    });\r\n\r\n    Post.create({ title: 'Some Title 1', body: 'Some body 1' }, function(err, results) {\r\n      Post.find({ 'title.ilike': '%title%' }, { only: ['id', 'body'] }, function(err, post) {\r\n        // Hooray!\r\n      });\r\n    });\r\n\r\n#The Full Monty\r\n\r\nThe following examples use these database tables as examples:\r\n\r\n### posts\r\n\r\n| id   | title        | blurb        | body        | published   |\r\n|------|--------------|--------------|-------------|-------------|\r\n| 1    | Some Title 1 | Some blurb 1 | Some body 1 | false       |\r\n| 2    | Some Title 1 | Some blurb 2 | Some body 2 | true        |\r\n| 3    | Some Title 1 | Some blurb 3 | Some body 3 | false       |\r\n| 4    | Some Title 1 | Some blurb 4 | Some body 4 | true        |\r\n\r\n### comments\r\n\r\n| id | post_id | comment   | created_at |\r\n|----|---------|-----------|------------|\r\n|  1 |       1 | Comment 1 | 2012-12-11 |\r\n|  2 |       1 | Comment 2 | 2012-12-11 |\r\n|  3 |       2 | Comment 3 | 2012-12-11 |\r\n|  4 |       2 | Comment 4 | 2012-12-11 |\r\n|  5 |       3 | Comment 5 | 2012-12-11 |\r\n|  6 |       3 | Comment 6 | 2012-12-11 |\r\n|  7 |       4 | Comment 7 | 2012-12-11 |\r\n|  8 |       4 | Comment 8 | 2012-12-11 |\r\n\r\nGiven this setup:\r\n\r\n    var FastLegSBase = require('FastLegS');\r\n\r\n    // gonna use PostgreSQL\r\n    var FastLegS = new FastLegSBase('pg');\r\n\r\n    var connectionParams = {\r\n      user: 'shes', password: 'got',\r\n      database: 'legs', host: 'localhost', port: 5432\r\n    }\r\n\r\n    FastLegS.connect(connectionParams);\r\n\r\n    var callback = function(err, results) {\r\n      console.dir(err);\r\n      console.dir(results);\r\n    }\r\n    \r\n    var Comment = FastLegS.Base.extend({\r\n      tableName: 'comments',\r\n      primaryKey: 'id'\r\n    });\r\n    \r\n    var Post = FastLegS.Base.extend({\r\n      tableName: 'posts',\r\n      primaryKey: 'id'\r\n    });\r\n\r\nThe following are examples of basic CRUD operations:\r\n\r\n##Create\r\n\r\nCalls to ```create``` can take an object or an array of objects.\r\n\r\n    Post.create(\r\n      { id: 5, title: 'Some Title 5', body: 'Some body 5' },\r\n      callback\r\n    )\r\n\r\n    Post.create(\r\n      [{ id: 6, title: 'Some Title 6', body: 'Some body 6' },\r\n       { id: 7, title: 'Some Title 7', body: 'Some body 7' }],\r\n      callback\r\n    )\r\n\r\nThe ```results``` passed to the callback are different depending on the database.\r\n\r\nIn the case of PostgreSQL, the ```results``` will be an object of the form:\r\n\r\n    {\r\n      rows: [{ id: 5,\r\n             title: 'Some Title 5',\r\n             blurb: null,\r\n             body: 'Some body 5',\r\n             published: null }],\r\n      command: INSERT,\r\n      rowCount: 1,\r\n      oid: 0\r\n    }\r\n\r\nIn the case of MySQL, the ```results``` will be an object of the form:\r\n\r\n    {\r\n      fieldCount: 0,\r\n      affectedRows: 1,\r\n      insertId: 0,\r\n      serverStatus: 2,\r\n      warningCount: 0,\r\n      message: ''\r\n    }\r\n\r\n##Read\r\n\r\nThe various forms of the ```find``` command are very flexible. We'll present a few of them here.\r\n\r\n####All:\r\n\r\n    Post.find({}, callback)\r\n\r\noutputs:\r\n\r\n    [ \r\n      { id: 1,\r\n        title: 'Some Title 1',\r\n        blurb: null,\r\n        body: 'Some body 1',\r\n        published: null,\r\n        created_at: null,\r\n        updated_at: null },\r\n      ...\r\n      { id: 5,\r\n        title: 'Some Title 5',\r\n        blurb: null,\r\n        body: 'Some body 5',\r\n        published: null,\r\n        created_at: null,\r\n        updated_at: null },\r\n      { id: 6,\r\n        title: 'Some Title 6',\r\n        blurb: null,\r\n        body: 'Some body 6',\r\n        published: null,\r\n        created_at: null,\r\n        updated_at: null },\r\n      { id: 7,\r\n        title: 'Some Title 7',\r\n        blurb: null,\r\n        body: 'Some body 7',\r\n        published: null,\r\n        created_at: null,\r\n        updated_at: null } \r\n    ]\r\n\r\n####By primary key:\r\n\r\n    Post.find(6, callback)\r\n\r\noutputs:\r\n\r\n    {\r\n      id: 6,\r\n      title: 'Some Title 6',\r\n      blurb: null,\r\n      body: 'Some body 6',\r\n      published: null,\r\n      created_at: null,\r\n      updated_at: null\r\n    }\r\n\r\n####Only show some fields:\r\n\r\n    Post.find(6, {only: ['id','title']}, callback)\r\n\r\noutputs:\r\n\r\n    { id: 6, title: 'Some Title 6' }\r\n\r\n####Some clauses:\r\n\r\n    Post.find({'title.like': 'Some%'}, callback)\r\n    Post.find({'id.in': [6, 7]}, callback)\r\n    Post.find({'id.nin': [6]}, callback)\r\n    Post.find({'$or': {'id.equals': 5, 'body.like': '%body 7'}}, callback)\r\n\r\n####Order, offset, limit\r\n\r\n    Post.find({}, { order: ['-id'] }, callback)\r\n    Post.find({}, { offset: 1, limit: 1 }, callback)\r\n\r\n####Count:\r\n\r\n    Post.find({}, {count: true}, callback)\r\n\r\noutputs:\r\n\r\n    { count: 7 }\r\n\r\n##Update\r\n\r\n    Post.update(\r\n      { title: 'Some Title 6' },\r\n      { title: 'Renamed title' },\r\n      callback\r\n    )\r\n\r\n##Delete\r\n\r\n    Post.destroy({ 'id.in': [5, 7]}, callback)\r\n    Post.truncate(callback)\r\n\r\n##A Taste of Relationships\r\n\r\nYou can call out relationships when you extend FastLegS.Base:\r\n\r\n    var Post = FastLegS.Base.extend({\r\n      tableName: 'posts',\r\n      primaryKey: 'id',\r\n      many: [\r\n        { 'comments': Comment, joinOn: 'post_id' }\r\n      ]\r\n    });\r\n    \r\nYou can then create complex object relationships with join logic:\r\n\r\n    Post.find(\r\n      {}, \r\n      { include: { comments: { only: ['id', 'comment'] } } },\r\n      callback\r\n    )\r\n\r\noutputs:\r\n\r\n    [\r\n      {\r\n          body: 'Some body 1',\r\n          title: 'Some Title 1',\r\n          id: 1,\r\n          updated_at: null,\r\n          published: false,\r\n          blurb: 'Some blurb 1',\r\n          created_at: null,\r\n          comments: [\r\n              { id: 1, comment: 'Comment 1' },\r\n              { id: 2, comment: 'Comment 2' }\r\n          ]\r\n      },\r\n      {\r\n          body: 'Some body 2',\r\n          title: 'Some Title 2',\r\n          id: 2,\r\n          updated_at: null,\r\n          published: true,\r\n          blurb: null,\r\n          created_at: null,\r\n          comments: [\r\n              { id: 3, comment: 'Comment 3' },\r\n              { id: 4, comment: 'Comment 4' }\r\n          ]\r\n      },\r\n      ...\r\n    ]\r\n\r\n##Summary\r\n\r\nThe tests are an excellent reference for the various modifiers and syntactic\r\nsugar you can use in FastLegS.\r\n\r\n##ToDo\r\n\r\nWatch for updates to examples in the near future to show features like relationships and advanced queries.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"PostgreSQL ORM on top of node-postgres."}